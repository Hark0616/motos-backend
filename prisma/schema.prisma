generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoGasto {
  ALQUILER
  MECANICO
  COMISION
  COMIDA
  MATERIALES
  TRASPASO
  REPUESTOS
  MANTENIMIENTO
  OTROS
}

// Tipos de gastos que SIEMPRE deben estar asociados a una moto
const gastosMotoObligatorios = [TipoGasto.MECANICO, TipoGasto.REPUESTOS, TipoGasto.COMISION, TipoGasto.TRASPASO, TipoGasto.MANTENIMIENTO]

model Moto {
  id              Int      @id @default(autoincrement())
  marca           String
  modelo          String
  a√±o             Int
  kilometraje     Int
  estado          String   // EN_EVALUACION, EN_REPARACION, DISPONIBLE, VENDIDA, RESERVADA
  precioCompra    Float
  precioVenta     Float?
  fechaCompra     DateTime @default(now())
  fechaVenta      DateTime?
  descripcion     String?
  fotos           String[] // URLs de las fotos
  documentos      Json?    // { matricula?: string, soat?: string, revisionTecnica?: string }
  reparaciones    Json?    // [{ descripcion: string, costo: float, fecha: datetime }]
  clienteActualId Int?
  clienteActual   Cliente? @relation("ClienteActualMotos", fields: [clienteActualId], references: [id])
  compras         Compra[]
  ventas          Venta[]
  gastos          Gasto[]
  comisiones      Comision[]
}

model Cliente {
  id            Int       @id @default(autoincrement())
  nombre        String
  cedula        String    @unique
  telefono      String?
  correo        String?
  rol           String
  compras       Compra[]
  ventas        Venta[]
  motosActuales Moto[]    @relation("ClienteActualMotos")
}

model Compra {
  id             Int      @id @default(autoincrement())
  motoId         Int
  clienteId      Int
  precio         Float
  fecha          DateTime @default(now())
  moto           Moto     @relation(fields: [motoId], references: [id])
  cliente        Cliente  @relation(fields: [clienteId], references: [id])
}

model Venta {
  id             Int      @id @default(autoincrement())
  motoId         Int
  clienteId      Int
  precio         Float
  fecha          DateTime @default(now())
  formaPago      String
  traspasoEstado String   // pendiente, hecho
  moto           Moto     @relation(fields: [motoId], references: [id])
  cliente        Cliente  @relation(fields: [clienteId], references: [id])
  comisiones     Comision[]
}

model Gasto {
  id          Int       @id @default(autoincrement())
  tipo        TipoGasto
  descripcion String?
  monto       Float
  fecha       DateTime  @default(now())
  motoId      Int?
  moto        Moto?     @relation(fields: [motoId], references: [id])
  comprobante String?   // URL o referencia al comprobante
  pagado      Boolean   @default(false)
  fechaPago   DateTime?
  notas       String?
}

model Comision {
  id        Int      @id @default(autoincrement())
  monto     Float
  fecha     DateTime @default(now())
  pagado    Boolean  @default(false)
  fechaPago DateTime?
  motoId    Int
  moto      Moto     @relation(fields: [motoId], references: [id])
  ventaId   Int?
  venta     Venta?   @relation(fields: [ventaId], references: [id])
  notas     String?
}
